// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

/// The maths library using MPFR for high precision
class Maths {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  Maths(ffi.DynamicLibrary dynamicLibrary) : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  Maths.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  void printValue(
    LatLngDart p,
  ) {
    return _printValue(
      p,
    );
  }

  late final _printValuePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(LatLngDart)>>('printValue');
  late final _printValue =
      _printValuePtr.asFunction<void Function(LatLngDart)>();

  ffi.Pointer<ffi.Void> ConvertToShape(
    ffi.Pointer<ShapeDart> shapeDart,
    int addStraigthSides,
  ) {
    return _ConvertToShape(
      shapeDart,
      addStraigthSides,
    );
  }

  late final _ConvertToShapePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ShapeDart>, ffi.Int)>>('ConvertToShape');
  late final _ConvertToShape = _ConvertToShapePtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ShapeDart>, int)>();

  void AddFirstSide(
    ffi.Pointer<ffi.Void> shape,
    LatLngDart begin,
  ) {
    return _AddFirstSide(
      shape,
      begin,
    );
  }

  late final _AddFirstSidePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Void>, LatLngDart)>>('AddFirstSide');
  late final _AddFirstSide = _AddFirstSidePtr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, LatLngDart)>();

  void AddStraightSide(
    ffi.Pointer<ffi.Void> shape,
  ) {
    return _AddStraightSide(
      shape,
    );
  }

  late final _AddStraightSidePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'AddStraightSide');
  late final _AddStraightSide =
      _AddStraightSidePtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  void ModifyLastVertex(
    ffi.Pointer<ffi.Void> shape,
    LatLngDart point,
  ) {
    return _ModifyLastVertex(
      shape,
      point,
    );
  }

  late final _ModifyLastVertexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Void>, LatLngDart)>>('ModifyLastVertex');
  late final _ModifyLastVertex = _ModifyLastVertexPtr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, LatLngDart)>();

  void CloseShape(
    ffi.Pointer<ffi.Void> shape,
  ) {
    return _CloseShape(
      shape,
    );
  }

  late final _CloseShapePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'CloseShape');
  late final _CloseShape =
      _CloseShapePtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  void NewSegment(
    ffi.Pointer<ffi.Void> shape,
  ) {
    return _NewSegment(
      shape,
    );
  }

  late final _NewSegmentPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'NewSegment');
  late final _NewSegment =
      _NewSegmentPtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  void RemoveLastVertexAndSide(
    ffi.Pointer<ffi.Void> shape,
  ) {
    return _RemoveLastVertexAndSide(
      shape,
    );
  }

  late final _RemoveLastVertexAndSidePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'RemoveLastVertexAndSide');
  late final _RemoveLastVertexAndSide = _RemoveLastVertexAndSidePtr.asFunction<
      void Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> CreateCircle(
    LatLngDart centre,
    double radius,
  ) {
    return _CreateCircle(
      centre,
      radius,
    );
  }

  late final _CreateCirclePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              LatLngDart, ffi.Double)>>('CreateCircle');
  late final _CreateCircle = _CreateCirclePtr.asFunction<
      ffi.Pointer<ffi.Void> Function(LatLngDart, double)>();

  void FreeShape(
    ffi.Pointer<ffi.Void> shape,
  ) {
    return _FreeShape(
      shape,
    );
  }

  late final _FreeShapePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'FreeShape');
  late final _FreeShape =
      _FreeShapePtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  void Reverse(
    ffi.Pointer<ffi.Void> shape,
  ) {
    return _Reverse(
      shape,
    );
  }

  late final _ReversePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'Reverse');
  late final _Reverse =
      _ReversePtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  int hit(
    ffi.Pointer<ffi.Void> shape,
    ffi.Pointer<LatLngDart> point,
  ) {
    return _hit(
      shape,
      point,
    );
  }

  late final _hitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<LatLngDart>)>>('hit');
  late final _hit = _hitPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<LatLngDart>)>();

  int IsValid(
    ffi.Pointer<ffi.Void> shape,
    ffi.Pointer<ffi.Int> segment,
    ffi.Pointer<ffi.Int> side,
  ) {
    return _IsValid(
      shape,
      segment,
      side,
    );
  }

  late final _IsValidPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>)>>('IsValid');
  late final _IsValid = _IsValidPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>();

  ffi.Pointer<ffi.Void> IntersectShapes(
    ffi.Pointer<ffi.Void> a,
    ffi.Pointer<ffi.Void> b,
  ) {
    return _IntersectShapes(
      a,
      b,
    );
  }

  late final _IntersectShapesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>>('IntersectShapes');
  late final _IntersectShapes = _IntersectShapesPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  int ShapesEqual(
    ffi.Pointer<ffi.Void> a,
    ffi.Pointer<ffi.Void> b,
  ) {
    return _ShapesEqual(
      a,
      b,
    );
  }

  late final _ShapesEqualPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>('ShapesEqual');
  late final _ShapesEqual = _ShapesEqualPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  void whyUnequal(
    ffi.Pointer<ffi.Void> a,
    ffi.Pointer<ffi.Void> b,
  ) {
    return _whyUnequal(
      a,
      b,
    );
  }

  late final _whyUnequalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>('whyUnequal');
  late final _whyUnequal = _whyUnequalPtr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> GetSegments(
    ffi.Pointer<ffi.Void> shape,
    ffi.Pointer<ffi.Int> length,
  ) {
    return _GetSegments(
      shape,
      length,
    );
  }

  late final _GetSegmentsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Int>)>>('GetSegments');
  late final _GetSegments = _GetSegmentsPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Int>)>();

  ffi.Pointer<LatLngDart> GetAllVertices(
    ffi.Pointer<ffi.Void> shape,
    int segmentIndex,
    ffi.Pointer<ffi.Int> length,
  ) {
    return _GetAllVertices(
      shape,
      segmentIndex,
      length,
    );
  }

  late final _GetAllVerticesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<LatLngDart> Function(ffi.Pointer<ffi.Void>, ffi.Int,
              ffi.Pointer<ffi.Int>)>>('GetAllVertices');
  late final _GetAllVertices = _GetAllVerticesPtr.asFunction<
      ffi.Pointer<LatLngDart> Function(
          ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Int>)>();

  void FreeVertices(
    ffi.Pointer<LatLngDart> vertices,
  ) {
    return _FreeVertices(
      vertices,
    );
  }

  late final _FreeVerticesPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<LatLngDart>)>>(
          'FreeVertices');
  late final _FreeVertices =
      _FreeVerticesPtr.asFunction<void Function(ffi.Pointer<LatLngDart>)>();

  ffi.Pointer<LatLngDart> GetIntermediatePoints(
    ffi.Pointer<ffi.Void> shape,
    int segIndex,
    int sideIndex,
    double meterPerIntermediatePoint,
    ffi.Pointer<ffi.Int> numPoints,
    int max,
  ) {
    return _GetIntermediatePoints(
      shape,
      segIndex,
      sideIndex,
      meterPerIntermediatePoint,
      numPoints,
      max,
    );
  }

  late final _GetIntermediatePointsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<LatLngDart> Function(
              ffi.Pointer<ffi.Void>,
              ffi.Int,
              ffi.Int,
              ffi.Double,
              ffi.Pointer<ffi.Int>,
              ffi.Int)>>('GetIntermediatePoints');
  late final _GetIntermediatePoints = _GetIntermediatePointsPtr.asFunction<
      ffi.Pointer<LatLngDart> Function(ffi.Pointer<ffi.Void>, int, int, double,
          ffi.Pointer<ffi.Int>, int)>();

  void FreeIntermediatePoints(
    ffi.Pointer<LatLngDart> points,
  ) {
    return _FreeIntermediatePoints(
      points,
    );
  }

  late final _FreeIntermediatePointsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<LatLngDart>)>>(
          'FreeIntermediatePoints');
  late final _FreeIntermediatePoints = _FreeIntermediatePointsPtr.asFunction<
      void Function(ffi.Pointer<LatLngDart>)>();

  int GetNumberOfSegments(
    ffi.Pointer<ffi.Void> shape,
  ) {
    return _GetNumberOfSegments(
      shape,
    );
  }

  late final _GetNumberOfSegmentsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Void>)>>(
          'GetNumberOfSegments');
  late final _GetNumberOfSegments =
      _GetNumberOfSegmentsPtr.asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  int GetNumberOfSidesInSegment(
    ffi.Pointer<ffi.Void> shape,
    int segmentIndex,
  ) {
    return _GetNumberOfSidesInSegment(
      shape,
      segmentIndex,
    );
  }

  late final _GetNumberOfSidesInSegmentPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Int)>>(
      'GetNumberOfSidesInSegment');
  late final _GetNumberOfSidesInSegment = _GetNumberOfSidesInSegmentPtr
      .asFunction<int Function(ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Void> LatitudeQuestion(
    ffi.Pointer<ffi.Void> shape,
    double latitude,
    int theirsHigher,
  ) {
    return _LatitudeQuestion(
      shape,
      latitude,
      theirsHigher,
    );
  }

  late final _LatitudeQuestionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Double, ffi.Int)>>('LatitudeQuestion');
  late final _LatitudeQuestion = _LatitudeQuestionPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, double, int)>();

  ffi.Pointer<ffi.Void> LongitudeQuestion(
    ffi.Pointer<ffi.Void> shape,
    double longitude,
    int theirsHigher,
  ) {
    return _LongitudeQuestion(
      shape,
      longitude,
      theirsHigher,
    );
  }

  late final _LongitudeQuestionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, ffi.Double,
              ffi.Int)>>('LongitudeQuestion');
  late final _LongitudeQuestion = _LongitudeQuestionPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, double, int)>();

  ffi.Pointer<ffi.Void> AdminAreaQuesiton(
    ffi.Pointer<ffi.Void> shape,
    ffi.Pointer<ffi.Void> regions,
    int length,
    LatLngDart position,
    int same,
  ) {
    return _AdminAreaQuesiton(
      shape,
      regions,
      length,
      position,
      same,
    );
  }

  late final _AdminAreaQuesitonPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Int,
              LatLngDart,
              ffi.Int)>>('AdminAreaQuesiton');
  late final _AdminAreaQuesiton = _AdminAreaQuesitonPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Void>, int, LatLngDart, int)>();

  ffi.Pointer<ffi.Void> WithinRadiusQuestion(
    ffi.Pointer<ffi.Void> shape,
    LatLngDart centre,
    double radius,
    int answer,
  ) {
    return _WithinRadiusQuestion(
      shape,
      centre,
      radius,
      answer,
    );
  }

  late final _WithinRadiusQuestionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, LatLngDart,
              ffi.Double, ffi.Int)>>('WithinRadiusQuestion');
  late final _WithinRadiusQuestion = _WithinRadiusQuestionPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Void>, LatLngDart, double, int)>();

  ffi.Pointer<ffi.Void> UpdateBoundaryWithClosests(
    ffi.Pointer<ffi.Void> boundary,
    LatLngDart position,
    ffi.Pointer<LatLngDart> objects,
    int numObjects,
    int answer,
    int deleteFirst,
  ) {
    return _UpdateBoundaryWithClosests(
      boundary,
      position,
      objects,
      numObjects,
      answer,
      deleteFirst,
    );
  }

  late final _UpdateBoundaryWithClosestsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>,
              LatLngDart,
              ffi.Pointer<LatLngDart>,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('UpdateBoundaryWithClosests');
  late final _UpdateBoundaryWithClosests =
      _UpdateBoundaryWithClosestsPtr.asFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, LatLngDart,
              ffi.Pointer<LatLngDart>, int, int, int)>();

  void InitEverything() {
    return _InitEverything();
  }

  late final _InitEverythingPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('InitEverything');
  late final _InitEverything = _InitEverythingPtr.asFunction<void Function()>();

  void DestroyEverything() {
    return _DestroyEverything();
  }

  late final _DestroyEverythingPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('DestroyEverything');
  late final _DestroyEverything =
      _DestroyEverythingPtr.asFunction<void Function()>();

  int ConversionTestFromLatLng(
    LatLngDart point,
    int printInfo,
  ) {
    return _ConversionTestFromLatLng(
      point,
      printInfo,
    );
  }

  late final _ConversionTestFromLatLngPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(LatLngDart, ffi.Int)>>(
          'ConversionTestFromLatLng');
  late final _ConversionTestFromLatLng =
      _ConversionTestFromLatLngPtr.asFunction<int Function(LatLngDart, int)>();

  int ConversionTestFromVec3(
    Vector3Dart point,
    int printInfo,
  ) {
    return _ConversionTestFromVec3(
      point,
      printInfo,
    );
  }

  late final _ConversionTestFromVec3Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(Vector3Dart, ffi.Int)>>(
          'ConversionTestFromVec3');
  late final _ConversionTestFromVec3 =
      _ConversionTestFromVec3Ptr.asFunction<int Function(Vector3Dart, int)>();

  int IntersectionTest(
    int printInfo,
  ) {
    return _IntersectionTest(
      printInfo,
    );
  }

  late final _IntersectionTestPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>(
          'IntersectionTest');
  late final _IntersectionTest =
      _IntersectionTestPtr.asFunction<int Function(int)>();

  int CircleStraightTest(
    int printInfo,
  ) {
    return _CircleStraightTest(
      printInfo,
    );
  }

  late final _CircleStraightTestPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>(
          'CircleStraightTest');
  late final _CircleStraightTest =
      _CircleStraightTestPtr.asFunction<int Function(int)>();

  int CircleCircleTest(
    int printInfo,
  ) {
    return _CircleCircleTest(
      printInfo,
    );
  }

  late final _CircleCircleTestPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>(
          'CircleCircleTest');
  late final _CircleCircleTest =
      _CircleCircleTestPtr.asFunction<int Function(int)>();

  int PlaneTest(
    LatLngDart first,
    LatLngDart second,
    ffi.Pointer<Vector3Dart> normal,
    int printInfo,
  ) {
    return _PlaneTest(
      first,
      second,
      normal,
      printInfo,
    );
  }

  late final _PlaneTestPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(LatLngDart, LatLngDart, ffi.Pointer<Vector3Dart>,
              ffi.Int)>>('PlaneTest');
  late final _PlaneTest = _PlaneTestPtr.asFunction<
      int Function(LatLngDart, LatLngDart, ffi.Pointer<Vector3Dart>, int)>();

  int CircleTest(
    LatLngDart centre,
    double radius,
    ffi.Pointer<Vector3Dart> normal,
    ffi.Pointer<LatLngDart> points,
    int numPoints,
    int printInfo,
  ) {
    return _CircleTest(
      centre,
      radius,
      normal,
      points,
      numPoints,
      printInfo,
    );
  }

  late final _CircleTestPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(LatLngDart, ffi.Double, ffi.Pointer<Vector3Dart>,
              ffi.Pointer<LatLngDart>, ffi.Int, ffi.Int)>>('CircleTest');
  late final _CircleTest = _CircleTestPtr.asFunction<
      int Function(LatLngDart, double, ffi.Pointer<Vector3Dart>,
          ffi.Pointer<LatLngDart>, int, int)>();

  int TangentToLine(
    LatLngDart begin,
    LatLngDart end,
    Vector3Dart tangent,
    int printInfo,
    int reducePresision,
  ) {
    return _TangentToLine(
      begin,
      end,
      tangent,
      printInfo,
      reducePresision,
    );
  }

  late final _TangentToLinePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(LatLngDart, LatLngDart, Vector3Dart, ffi.Int,
              ffi.Int)>>('TangentToLine');
  late final _TangentToLine = _TangentToLinePtr.asFunction<
      int Function(LatLngDart, LatLngDart, Vector3Dart, int, int)>();

  int TangentToCircle(
    LatLngDart centre,
    double radius,
    LatLngDart point,
    Vector3Dart tangent,
    int printInfo,
  ) {
    return _TangentToCircle(
      centre,
      radius,
      point,
      tangent,
      printInfo,
    );
  }

  late final _TangentToCirclePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(LatLngDart, ffi.Double, LatLngDart, Vector3Dart,
              ffi.Int)>>('TangentToCircle');
  late final _TangentToCircle = _TangentToCirclePtr.asFunction<
      int Function(LatLngDart, double, LatLngDart, Vector3Dart, int)>();

  int OneNonTransverseIntersection(
    LatLngDart s1,
    LatLngDart s2,
    LatLngDart s3,
    LatLngDart p1,
    LatLngDart p2,
    LatLngDart p3,
    int printInfo,
  ) {
    return _OneNonTransverseIntersection(
      s1,
      s2,
      s3,
      p1,
      p2,
      p3,
      printInfo,
    );
  }

  late final _OneNonTransverseIntersectionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              LatLngDart,
              LatLngDart,
              LatLngDart,
              LatLngDart,
              LatLngDart,
              LatLngDart,
              ffi.Int)>>('OneNonTransverseIntersection');
  late final _OneNonTransverseIntersection =
      _OneNonTransverseIntersectionPtr.asFunction<
          int Function(LatLngDart, LatLngDart, LatLngDart, LatLngDart,
              LatLngDart, LatLngDart, int)>();

  int IntermediatePointsTest(
    int printInfo,
  ) {
    return _IntermediatePointsTest(
      printInfo,
    );
  }

  late final _IntermediatePointsTestPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>(
          'IntermediatePointsTest');
  late final _IntermediatePointsTest =
      _IntermediatePointsTestPtr.asFunction<int Function(int)>();
}

final class LatLngDart extends ffi.Struct {
  @ffi.Double()
  external double lat;

  @ffi.Double()
  external double lon;
}

final class SegmentDart extends ffi.Struct {
  external ffi.Pointer<LatLngDart> vertices;

  @ffi.Int()
  external int verticesCount;
}

final class ShapeDart extends ffi.Struct {
  external ffi.Pointer<SegmentDart> segments;

  @ffi.Int()
  external int segmentsCount;
}

final class Vector3Dart extends ffi.Struct {
  @ffi.Double()
  external double x;

  @ffi.Double()
  external double y;

  @ffi.Double()
  external double z;
}
