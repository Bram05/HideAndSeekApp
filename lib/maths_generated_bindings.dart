// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

/// The maths library using MPFR for high precision
class Maths {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  Maths(ffi.DynamicLibrary dynamicLibrary) : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  Maths.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  ffi.Pointer<ffi.Void> GetSegments(
    ffi.Pointer<ffi.Void> shape,
    ffi.Pointer<ffi.Int> length,
  ) {
    return _GetSegments(
      shape,
      length,
    );
  }

  late final _GetSegmentsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Int>)>>('GetSegments');
  late final _GetSegments = _GetSegmentsPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Int>)>();

  ffi.Pointer<LatLngDart> GetVertices(
    ffi.Pointer<ffi.Void> segment,
    int index,
    ffi.Pointer<ffi.Int> length,
  ) {
    return _GetVertices(
      segment,
      index,
      length,
    );
  }

  late final _GetVerticesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<LatLngDart> Function(ffi.Pointer<ffi.Void>, ffi.Int,
              ffi.Pointer<ffi.Int>)>>('GetVertices');
  late final _GetVertices = _GetVerticesPtr.asFunction<
      ffi.Pointer<LatLngDart> Function(
          ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Int>)>();

  void FreeVertices(
    ffi.Pointer<LatLngDart> vertices,
  ) {
    return _FreeVertices(
      vertices,
    );
  }

  late final _FreeVerticesPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<LatLngDart>)>>(
          'FreeVertices');
  late final _FreeVertices =
      _FreeVerticesPtr.asFunction<void Function(ffi.Pointer<LatLngDart>)>();

  ffi.Pointer<SideDart> GetSides(
    ffi.Pointer<ffi.Void> segment,
    int index,
    ffi.Pointer<ffi.Int> length,
  ) {
    return _GetSides(
      segment,
      index,
      length,
    );
  }

  late final _GetSidesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<SideDart> Function(ffi.Pointer<ffi.Void>, ffi.Int,
              ffi.Pointer<ffi.Int>)>>('GetSides');
  late final _GetSides = _GetSidesPtr.asFunction<
      ffi.Pointer<SideDart> Function(
          ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Int>)>();

  void FreeSides(
    ffi.Pointer<SideDart> sides,
  ) {
    return _FreeSides(
      sides,
    );
  }

  late final _FreeSidesPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<SideDart>)>>(
          'FreeSides');
  late final _FreeSides =
      _FreeSidesPtr.asFunction<void Function(ffi.Pointer<SideDart>)>();

  ffi.Pointer<ffi.Void> ConvertToShape(
    ffi.Pointer<ShapeDart> shapeDart,
  ) {
    return _ConvertToShape(
      shapeDart,
    );
  }

  late final _ConvertToShapePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ShapeDart>)>>('ConvertToShape');
  late final _ConvertToShape = _ConvertToShapePtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ShapeDart>)>();

  void FreeShape(
    ffi.Pointer<ffi.Void> shape,
  ) {
    return _FreeShape(
      shape,
    );
  }

  late final _FreeShapePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'FreeShape');
  late final _FreeShape =
      _FreeShapePtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  int hit(
    ffi.Pointer<ffi.Void> shape,
    ffi.Pointer<LatLngDart> point,
  ) {
    return _hit(
      shape,
      point,
    );
  }

  late final _hitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<LatLngDart>)>>('hit');
  late final _hit = _hitPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<LatLngDart>)>();

  ffi.Pointer<ffi.Void> IntersectShapes(
    ffi.Pointer<ffi.Void> a,
    ffi.Pointer<ffi.Void> b,
  ) {
    return _IntersectShapes(
      a,
      b,
    );
  }

  late final _IntersectShapesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>>('IntersectShapes');
  late final _IntersectShapes = _IntersectShapesPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  int ShapesEqual(
    ffi.Pointer<ffi.Void> a,
    ffi.Pointer<ffi.Void> b,
  ) {
    return _ShapesEqual(
      a,
      b,
    );
  }

  late final _ShapesEqualPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>('ShapesEqual');
  late final _ShapesEqual = _ShapesEqualPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  void whyUnequal(
    ffi.Pointer<ffi.Void> a,
    ffi.Pointer<ffi.Void> b,
  ) {
    return _whyUnequal(
      a,
      b,
    );
  }

  late final _whyUnequalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>('whyUnequal');
  late final _whyUnequal = _whyUnequalPtr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  int ConversionTestFromLatLng(
    LatLngDart point,
    int printInfo,
  ) {
    return _ConversionTestFromLatLng(
      point,
      printInfo,
    );
  }

  late final _ConversionTestFromLatLngPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(LatLngDart, ffi.Int)>>(
          'ConversionTestFromLatLng');
  late final _ConversionTestFromLatLng =
      _ConversionTestFromLatLngPtr.asFunction<int Function(LatLngDart, int)>();

  int ConversionTestFromVec3(
    Vector3Dart point,
    int printInfo,
  ) {
    return _ConversionTestFromVec3(
      point,
      printInfo,
    );
  }

  late final _ConversionTestFromVec3Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(Vector3Dart, ffi.Int)>>(
          'ConversionTestFromVec3');
  late final _ConversionTestFromVec3 =
      _ConversionTestFromVec3Ptr.asFunction<int Function(Vector3Dart, int)>();

  int IntersectionTest(
    int printInfo,
  ) {
    return _IntersectionTest(
      printInfo,
    );
  }

  late final _IntersectionTestPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>(
          'IntersectionTest');
  late final _IntersectionTest =
      _IntersectionTestPtr.asFunction<int Function(int)>();

  int CircleStraightTest(
    int printInfo,
  ) {
    return _CircleStraightTest(
      printInfo,
    );
  }

  late final _CircleStraightTestPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>(
          'CircleStraightTest');
  late final _CircleStraightTest =
      _CircleStraightTestPtr.asFunction<int Function(int)>();

  int CircleCircleTest(
    int printInfo,
  ) {
    return _CircleCircleTest(
      printInfo,
    );
  }

  late final _CircleCircleTestPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>(
          'CircleCircleTest');
  late final _CircleCircleTest =
      _CircleCircleTestPtr.asFunction<int Function(int)>();

  int PlaneTest(
    LatLngDart first,
    LatLngDart second,
    ffi.Pointer<Vector3Dart> normal,
    int printInfo,
  ) {
    return _PlaneTest(
      first,
      second,
      normal,
      printInfo,
    );
  }

  late final _PlaneTestPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(LatLngDart, LatLngDart, ffi.Pointer<Vector3Dart>,
              ffi.Int)>>('PlaneTest');
  late final _PlaneTest = _PlaneTestPtr.asFunction<
      int Function(LatLngDart, LatLngDart, ffi.Pointer<Vector3Dart>, int)>();

  int CircleTest(
    LatLngDart centre,
    double radius,
    ffi.Pointer<Vector3Dart> normal,
    ffi.Pointer<LatLngDart> points,
    int numPoints,
    int printInfo,
  ) {
    return _CircleTest(
      centre,
      radius,
      normal,
      points,
      numPoints,
      printInfo,
    );
  }

  late final _CircleTestPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(LatLngDart, ffi.Double, ffi.Pointer<Vector3Dart>,
              ffi.Pointer<LatLngDart>, ffi.Int, ffi.Int)>>('CircleTest');
  late final _CircleTest = _CircleTestPtr.asFunction<
      int Function(LatLngDart, double, ffi.Pointer<Vector3Dart>,
          ffi.Pointer<LatLngDart>, int, int)>();

  int TangentToLine(
    LatLngDart begin,
    LatLngDart end,
    Vector3Dart tangent,
    int printInfo,
  ) {
    return _TangentToLine(
      begin,
      end,
      tangent,
      printInfo,
    );
  }

  late final _TangentToLinePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              LatLngDart, LatLngDart, Vector3Dart, ffi.Int)>>('TangentToLine');
  late final _TangentToLine = _TangentToLinePtr.asFunction<
      int Function(LatLngDart, LatLngDart, Vector3Dart, int)>();

  int TangentToCircle(
    LatLngDart centre,
    double radius,
    LatLngDart point,
    Vector3Dart tangent,
    int printInfo,
  ) {
    return _TangentToCircle(
      centre,
      radius,
      point,
      tangent,
      printInfo,
    );
  }

  late final _TangentToCirclePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(LatLngDart, ffi.Double, LatLngDart, Vector3Dart,
              ffi.Int)>>('TangentToCircle');
  late final _TangentToCircle = _TangentToCirclePtr.asFunction<
      int Function(LatLngDart, double, LatLngDart, Vector3Dart, int)>();

  int OneNonTransverseIntersection(
    LatLngDart s1,
    LatLngDart s2,
    LatLngDart s3,
    LatLngDart p1,
    LatLngDart p2,
    LatLngDart p3,
    int printInfo,
  ) {
    return _OneNonTransverseIntersection(
      s1,
      s2,
      s3,
      p1,
      p2,
      p3,
      printInfo,
    );
  }

  late final _OneNonTransverseIntersectionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              LatLngDart,
              LatLngDart,
              LatLngDart,
              LatLngDart,
              LatLngDart,
              LatLngDart,
              ffi.Int)>>('OneNonTransverseIntersection');
  late final _OneNonTransverseIntersection =
      _OneNonTransverseIntersectionPtr.asFunction<
          int Function(LatLngDart, LatLngDart, LatLngDart, LatLngDart,
              LatLngDart, LatLngDart, int)>();
}

final class LatLngDart extends ffi.Struct {
  @ffi.Double()
  external double lat;

  @ffi.Double()
  external double lon;
}

final class SideDart extends ffi.Struct {
  @ffi.Int()
  external int isStraight;

  @ffi.Int()
  external int isClockwise;

  external LatLngDart centre;

  external LatLngDart properCentre;

  @ffi.Double()
  external double radius;

  @ffi.Double()
  external double startAngle;

  @ffi.Double()
  external double sweepAngle;
}

final class SegmentDart extends ffi.Struct {
  external ffi.Pointer<LatLngDart> vertices;

  @ffi.Int()
  external int verticesCount;

  external ffi.Pointer<SideDart> sides;

  @ffi.Int()
  external int sidesCount;
}

final class ShapeDart extends ffi.Struct {
  external ffi.Pointer<SegmentDart> segments;

  @ffi.Int()
  external int segmentsCount;
}

final class Vector3Dart extends ffi.Struct {
  @ffi.Double()
  external double x;

  @ffi.Double()
  external double y;

  @ffi.Double()
  external double z;
}
